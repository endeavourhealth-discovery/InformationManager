//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.12.23 at 09:36:56 AM GMT 
//


package org.endeavourhealth.informationmanager.transforms.sources.eqd;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for voc.CalculationType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="voc.CalculationType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="count"/&gt;
 *     &lt;enumeration value="percentOfParent"/&gt;
 *     &lt;enumeration value="percentRow"/&gt;
 *     &lt;enumeration value="percentColumn"/&gt;
 *     &lt;enumeration value="percentComplete"/&gt;
 *     &lt;enumeration value="sum"/&gt;
 *     &lt;enumeration value="averageMean"/&gt;
 *     &lt;enumeration value="minimum"/&gt;
 *     &lt;enumeration value="maximum"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "voc.CalculationType")
@XmlEnum
public enum VocCalculationType {

    @XmlEnumValue("count")
    COUNT("count"),
    @XmlEnumValue("percentOfParent")
    PERCENT_OF_PARENT("percentOfParent"),
    @XmlEnumValue("percentRow")
    PERCENT_ROW("percentRow"),
    @XmlEnumValue("percentColumn")
    PERCENT_COLUMN("percentColumn"),
    @XmlEnumValue("percentComplete")
    PERCENT_COMPLETE("percentComplete"),
    @XmlEnumValue("sum")
    SUM("sum"),
    @XmlEnumValue("averageMean")
    AVERAGE_MEAN("averageMean"),
    @XmlEnumValue("minimum")
    MINIMUM("minimum"),
    @XmlEnumValue("maximum")
    MAXIMUM("maximum");
    private final String value;

    VocCalculationType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static VocCalculationType fromValue(String v) {
        for (VocCalculationType c: VocCalculationType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
