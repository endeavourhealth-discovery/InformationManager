Prefix(:=<http://www.co-ode.org/roberts/family-tree.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(owl2xml:=<http://www.w3.org/2006/12/owl2-xml#>)


Ontology(<http://www.co-ode.org/roberts/family-tree.owl>
Annotation(rdfs:comment "A simple family relationships ontology and associated instances. the description is of the family of Robert Stevens and the intention is to use the minimal of asserted relationships and the maximum of inference. To do this  I've used role chains, nominals and properties hierarchies."^^xsd:string)

Declaration(Class(:Ancestor))
Declaration(Class(:AncestorOfRobert))
Declaration(Class(:Aunt))
Declaration(Class(:AuntInLaw))
Declaration(Class(:BloodRelation))
Declaration(Class(:Brother))
Declaration(Class(:BrotherInLaw))
Declaration(Class(:Cousin))
Declaration(Class(:Daughter))
Declaration(Class(:DaughterInLaw))
Declaration(Class(:Descendant))
Declaration(Class(:DomainEntity))
Declaration(Class(:Father))
Declaration(Class(:FatherInLaw))
Declaration(Class(:FemaleAncestor))
Declaration(Class(:FemaleDescendant))
Declaration(Class(:FemaleGender))
Declaration(Class(:FirstCousin))
Declaration(Class(:Forefather))
Declaration(Class(:Foremother))
Declaration(Class(:Gender))
Declaration(Class(:Grandfather))
Declaration(Class(:Grandmother))
Declaration(Class(:Grandparent))
Declaration(Class(:GreatAunt))
Declaration(Class(:GreatGrandfather))
Declaration(Class(:GreatGrandparent))
Declaration(Class(:GreatGreatGrandparent))
Declaration(Class(:GreatUncle))
Declaration(Class(:Husband))
Declaration(Class(:InLaw))
Declaration(Class(:MaleAncestor))
Declaration(Class(:MaleDescendant))
Declaration(Class(:MaleGender))
Declaration(Class(:Man))
Declaration(Class(:Marriage))
Declaration(Class(:Mother))
Declaration(Class(:MotherInLaw))
Declaration(Class(:Parent))
Declaration(Class(:ParentInLaw))
Declaration(Class(:Person))
Declaration(Class(:SecondCousin))
Declaration(Class(:SecondCousinOfRobert))
Declaration(Class(:Sibling))
Declaration(Class(:SiblingInLaw))
Declaration(Class(:Sister))
Declaration(Class(:SisterInLaw))
Declaration(Class(:Son))
Declaration(Class(:SonInLaw))
Declaration(Class(:Spouse))
Declaration(Class(:ThirdCousin))
Declaration(Class(:Uncle))
Declaration(Class(:UncleInLaw))
Declaration(Class(:UncleOfRichard))
Declaration(Class(:UncleOfRobert))
Declaration(Class(:Wife))
Declaration(Class(:Woman))
Declaration(Class(:test))
Declaration(ObjectProperty(:hasAncestor))
Declaration(ObjectProperty(:hasAunt))
Declaration(ObjectProperty(:hasAuntInLaw))
Declaration(ObjectProperty(:hasBrother))
Declaration(ObjectProperty(:hasBrotherInLaw))
Declaration(ObjectProperty(:hasChild))
Declaration(ObjectProperty(:hasDaughter))
Declaration(ObjectProperty(:hasFather))
Declaration(ObjectProperty(:hasFatherInLaw))
Declaration(ObjectProperty(:hasFemalePartner))
Declaration(ObjectProperty(:hasForeFather))
Declaration(ObjectProperty(:hasForeMother))
Declaration(ObjectProperty(:hasGender))
Declaration(ObjectProperty(:hasGrandParent))
Declaration(ObjectProperty(:hasGrandfather))
Declaration(ObjectProperty(:hasGrandmother))
Declaration(ObjectProperty(:hasGreatAunt))
Declaration(ObjectProperty(:hasGreatGrandParent))
Declaration(ObjectProperty(:hasGreatGrandfather))
Declaration(ObjectProperty(:hasGreatGrandmother))
Declaration(ObjectProperty(:hasGreatUncle))
Declaration(ObjectProperty(:hasHusband))
Declaration(ObjectProperty(:hasMalePartner))
Declaration(ObjectProperty(:hasMother))
Declaration(ObjectProperty(:hasMotherInLaw))
Declaration(ObjectProperty(:hasParent))
Declaration(ObjectProperty(:hasParentInLaw))
Declaration(ObjectProperty(:hasPartner))
Declaration(ObjectProperty(:hasSister))
Declaration(ObjectProperty(:hasSisterInLaw))
Declaration(ObjectProperty(:hasSon))
Declaration(ObjectProperty(:hasUncle))
Declaration(ObjectProperty(:hasUncleInLaw))
Declaration(ObjectProperty(:hasWife))
Declaration(ObjectProperty(:isAncestorOf))
Declaration(ObjectProperty(:isAuntInLawOf))
Declaration(ObjectProperty(:isAuntOf))
Declaration(ObjectProperty(:isBloodRelationOf))
Declaration(ObjectProperty(:isBrotherInLawOf))
Declaration(ObjectProperty(:isBrotherOf))
Declaration(ObjectProperty(:isChildOf))
Declaration(ObjectProperty(:isDaughterOf))
Declaration(ObjectProperty(:isDirectSiblingOf))
Declaration(ObjectProperty(:isFatherInLawOf))
Declaration(ObjectProperty(:isFatherOf))
Declaration(ObjectProperty(:isFemalePartnerIn))
Declaration(ObjectProperty(:isFirstCousinOf))
Declaration(ObjectProperty(:isFirstCousinOnceRemovedOf))
Declaration(ObjectProperty(:isForefatherOf))
Declaration(ObjectProperty(:isForemotherOf))
Declaration(ObjectProperty(:isGrandParentOf))
Declaration(ObjectProperty(:isGrandfatherOf))
Declaration(ObjectProperty(:isGrandmotherOf))
Declaration(ObjectProperty(:isGreatAuntOf))
Declaration(ObjectProperty(:isGreatGrandParentOf))
Declaration(ObjectProperty(:isGreatGrandfatherOf))
Declaration(ObjectProperty(:isGreatGrandmotherOf))
Declaration(ObjectProperty(:isGreatUncleOf))
Declaration(ObjectProperty(:isHusbandOf))
Declaration(ObjectProperty(:isInLawOf))
Declaration(ObjectProperty(:isMalePartnerIn))
Declaration(ObjectProperty(:isMotherInLawOf))
Declaration(ObjectProperty(:isMotherOf))
Declaration(ObjectProperty(:isNephewOf))
Declaration(ObjectProperty(:isNieceOf))
Declaration(ObjectProperty(:isParentInLawOf))
Declaration(ObjectProperty(:isParentOf))
Declaration(ObjectProperty(:isPartnerIn))
Declaration(ObjectProperty(:isRelationOf))
Declaration(ObjectProperty(:isSecondCousinOf))
Declaration(ObjectProperty(:isSiblingInLawOf))
Declaration(ObjectProperty(:isSiblingOf))
Declaration(ObjectProperty(:isSisterInLawOf))
Declaration(ObjectProperty(:isSisterOf))
Declaration(ObjectProperty(:isSonOf))
Declaration(ObjectProperty(:isSpouseOf))
Declaration(ObjectProperty(:isThirdCousinOf))
Declaration(ObjectProperty(:isUncleInLawOf))
Declaration(ObjectProperty(:isUncleOf))
Declaration(ObjectProperty(:isWifeOf))
Declaration(NamedIndividual(:richard_john_bright_1962))
Declaration(NamedIndividual(:robert_david_bright_1965))

############################
#   Object Properties
############################

# Object Property: :hasAncestor (:hasAncestor)

SubObjectPropertyOf(:hasAncestor :isBloodRelationOf)
InverseObjectProperties(:hasAncestor :isAncestorOf)
TransitiveObjectProperty(:hasAncestor)
ObjectPropertyDomain(:hasAncestor :Person)
ObjectPropertyRange(:hasAncestor :Person)

# Object Property: :hasAunt (:hasAunt)

SubObjectPropertyOf(:hasAunt :isBloodRelationOf)
InverseObjectProperties(:hasAunt :isAuntOf)
ObjectPropertyDomain(:hasAunt :Person)
ObjectPropertyRange(:hasAunt :Woman)

# Object Property: :hasAuntInLaw (:hasAuntInLaw)

InverseObjectProperties(:hasAuntInLaw :isAuntInLawOf)

# Object Property: :hasBrother (:hasBrother)

InverseObjectProperties(:hasBrother :isBrotherOf)
ObjectPropertyDomain(:hasBrother :Person)
ObjectPropertyRange(:hasBrother :Man)

# Object Property: :hasBrotherInLaw (:hasBrotherInLaw)

InverseObjectProperties(:hasBrotherInLaw :isBrotherInLawOf)

# Object Property: :hasChild (:hasChild)

InverseObjectProperties(:hasChild :isChildOf)
ObjectPropertyDomain(:hasChild :Person)
ObjectPropertyRange(:hasChild :Person)

# Object Property: :hasDaughter (:hasDaughter)

SubObjectPropertyOf(:hasDaughter :hasChild)
InverseObjectProperties(:hasDaughter :isDaughterOf)
ObjectPropertyDomain(:hasDaughter :Person)
ObjectPropertyRange(:hasDaughter :Woman)

# Object Property: :hasFather (:hasFather)

SubObjectPropertyOf(:hasFather :hasForeFather)
SubObjectPropertyOf(:hasFather :hasParent)
InverseObjectProperties(:hasFather :isFatherOf)
FunctionalObjectProperty(:hasFather)
ObjectPropertyDomain(:hasFather :Person)
ObjectPropertyRange(:hasFather :Man)

# Object Property: :hasFatherInLaw (:hasFatherInLaw)

SubObjectPropertyOf(:hasFatherInLaw :hasParentInLaw)
InverseObjectProperties(:hasFatherInLaw :isFatherInLawOf)
ObjectPropertyDomain(:hasFatherInLaw :Person)
ObjectPropertyRange(:hasFatherInLaw :Man)

# Object Property: :hasFemalePartner (:hasFemalePartner)

InverseObjectProperties(:hasFemalePartner :isFemalePartnerIn)
FunctionalObjectProperty(:hasFemalePartner)

# Object Property: :hasForeFather (:hasForeFather)

SubObjectPropertyOf(:hasForeFather :hasAncestor)
InverseObjectProperties(:hasForeFather :isForefatherOf)
TransitiveObjectProperty(:hasForeFather)
ObjectPropertyDomain(:hasForeFather :Person)
ObjectPropertyRange(:hasForeFather :Man)

# Object Property: :hasForeMother (:hasForeMother)

SubObjectPropertyOf(:hasForeMother :hasAncestor)
InverseObjectProperties(:hasForeMother :isForemotherOf)
TransitiveObjectProperty(:hasForeMother)
ObjectPropertyDomain(:hasForeMother :Person)
ObjectPropertyRange(:hasForeMother :Woman)

# Object Property: :hasGender (:hasGender)

FunctionalObjectProperty(:hasGender)
ObjectPropertyDomain(:hasGender :Person)
ObjectPropertyRange(:hasGender :Gender)

# Object Property: :hasGrandParent (:hasGrandParent)

SubObjectPropertyOf(:hasGrandParent :hasAncestor)
InverseObjectProperties(:hasGrandParent :isGrandParentOf)
ObjectPropertyDomain(:hasGrandParent :Person)
ObjectPropertyRange(:hasGrandParent :Person)

# Object Property: :hasGrandfather (:hasGrandfather)

SubObjectPropertyOf(:hasGrandfather :hasGrandParent)
InverseObjectProperties(:hasGrandfather :isGrandfatherOf)
ObjectPropertyDomain(:hasGrandfather :Person)
ObjectPropertyRange(:hasGrandfather :Man)

# Object Property: :hasGrandmother (:hasGrandmother)

SubObjectPropertyOf(:hasGrandmother :hasGrandParent)
InverseObjectProperties(:hasGrandmother :isGrandmotherOf)
ObjectPropertyDomain(:hasGrandmother :Person)
ObjectPropertyRange(:hasGrandmother :Woman)

# Object Property: :hasGreatAunt (:hasGreatAunt)

SubObjectPropertyOf(:hasGreatAunt :isBloodRelationOf)
InverseObjectProperties(:hasGreatAunt :isGreatAuntOf)
ObjectPropertyDomain(:hasGreatAunt :Person)
ObjectPropertyRange(:hasGreatAunt :Woman)

# Object Property: :hasGreatGrandParent (:hasGreatGrandParent)

SubObjectPropertyOf(:hasGreatGrandParent :hasAncestor)
InverseObjectProperties(:hasGreatGrandParent :isGreatGrandParentOf)
ObjectPropertyDomain(:hasGreatGrandParent :Person)
ObjectPropertyRange(:hasGreatGrandParent :Person)

# Object Property: :hasGreatGrandfather (:hasGreatGrandfather)

SubObjectPropertyOf(:hasGreatGrandfather :hasGreatGrandParent)
InverseObjectProperties(:hasGreatGrandfather :isGreatGrandfatherOf)
ObjectPropertyDomain(:hasGreatGrandfather :Person)
ObjectPropertyRange(:hasGreatGrandfather :Man)

# Object Property: :hasGreatGrandmother (:hasGreatGrandmother)

SubObjectPropertyOf(:hasGreatGrandmother :hasGreatGrandParent)
InverseObjectProperties(:hasGreatGrandmother :isGreatGrandmotherOf)
ObjectPropertyDomain(:hasGreatGrandmother :Person)
ObjectPropertyRange(:hasGreatGrandmother :Woman)

# Object Property: :hasGreatUncle (:hasGreatUncle)

SubObjectPropertyOf(:hasGreatUncle :isBloodRelationOf)
InverseObjectProperties(:hasGreatUncle :isGreatUncleOf)
ObjectPropertyDomain(:hasGreatUncle :Person)
ObjectPropertyRange(:hasGreatUncle :Man)

# Object Property: :hasHusband (:hasHusband)

SubObjectPropertyOf(:hasHusband :isSpouseOf)
InverseObjectProperties(:hasHusband :isHusbandOf)
ObjectPropertyDomain(:hasHusband :Woman)
ObjectPropertyRange(:hasHusband :Man)

# Object Property: :hasMalePartner (:hasMalePartner)

InverseObjectProperties(:hasMalePartner :isMalePartnerIn)
FunctionalObjectProperty(:hasMalePartner)

# Object Property: :hasMother (:hasMother)

SubObjectPropertyOf(:hasMother :hasForeMother)
SubObjectPropertyOf(:hasMother :hasParent)
InverseObjectProperties(:hasMother :isMotherOf)
FunctionalObjectProperty(:hasMother)
ObjectPropertyDomain(:hasMother :Person)
ObjectPropertyRange(:hasMother :Woman)

# Object Property: :hasMotherInLaw (:hasMotherInLaw)

SubObjectPropertyOf(:hasMotherInLaw :hasParentInLaw)
InverseObjectProperties(:hasMotherInLaw :isMotherInLawOf)
ObjectPropertyDomain(:hasMotherInLaw :Person)
ObjectPropertyRange(:hasMotherInLaw :Woman)

# Object Property: :hasParent (:hasParent)

SubObjectPropertyOf(:hasParent :hasAncestor)
InverseObjectProperties(:hasParent :isParentOf)
ObjectPropertyDomain(:hasParent :Person)
ObjectPropertyRange(:hasParent :Person)

# Object Property: :hasParentInLaw (:hasParentInLaw)

InverseObjectProperties(:hasParentInLaw :isParentInLawOf)

# Object Property: :hasPartner (:hasPartner)

InverseObjectProperties(:hasPartner :isPartnerIn)

# Object Property: :hasSister (:hasSister)

InverseObjectProperties(:hasSister :isSisterOf)

# Object Property: :hasSisterInLaw (:hasSisterInLaw)

InverseObjectProperties(:hasSisterInLaw :isSisterInLawOf)

# Object Property: :hasSon (:hasSon)

SubObjectPropertyOf(:hasSon :hasChild)
InverseObjectProperties(:hasSon :isSonOf)
ObjectPropertyDomain(:hasSon :Person)
ObjectPropertyRange(:hasSon :Man)

# Object Property: :hasUncle (:hasUncle)

SubObjectPropertyOf(:hasUncle :isBloodRelationOf)
InverseObjectProperties(:hasUncle :isUncleOf)
ObjectPropertyDomain(:hasUncle :Person)
ObjectPropertyRange(:hasUncle :Man)

# Object Property: :hasUncleInLaw (:hasUncleInLaw)

InverseObjectProperties(:hasUncleInLaw :isUncleInLawOf)

# Object Property: :hasWife (:hasWife)

SubObjectPropertyOf(:hasWife :isSpouseOf)
InverseObjectProperties(:hasWife :isWifeOf)
ObjectPropertyDomain(:hasWife :Man)
ObjectPropertyRange(:hasWife :Woman)

# Object Property: :isAuntInLawOf (:isAuntInLawOf)

SubObjectPropertyOf(:isAuntInLawOf :isInLawOf)
ObjectPropertyDomain(:isAuntInLawOf :Woman)
ObjectPropertyRange(:isAuntInLawOf :Person)

# Object Property: :isAuntOf (:isAuntOf)

ObjectPropertyDomain(:isAuntOf :Woman)
ObjectPropertyRange(:isAuntOf :Person)

# Object Property: :isBloodRelationOf (:isBloodRelationOf)

SubObjectPropertyOf(:isBloodRelationOf :isRelationOf)
SymmetricObjectProperty(:isBloodRelationOf)
ObjectPropertyDomain(:isBloodRelationOf :Person)
ObjectPropertyRange(:isBloodRelationOf :Person)

# Object Property: :isBrotherInLawOf (:isBrotherInLawOf)

SubObjectPropertyOf(:isBrotherInLawOf :isSiblingInLawOf)
ObjectPropertyDomain(:isBrotherInLawOf :Man)
ObjectPropertyRange(:isBrotherInLawOf :Person)

# Object Property: :isBrotherOf (:isBrotherOf)

SubObjectPropertyOf(:isBrotherOf :isDirectSiblingOf)
ObjectPropertyDomain(:isBrotherOf :Man)
ObjectPropertyRange(:isBrotherOf :Person)

# Object Property: :isDaughterOf (:isDaughterOf)

SubObjectPropertyOf(:isDaughterOf :hasParent)

# Object Property: :isDirectSiblingOf (:isDirectSiblingOf)

SubObjectPropertyOf(:isDirectSiblingOf :isSiblingOf)
SymmetricObjectProperty(:isDirectSiblingOf)
ObjectPropertyDomain(:isDirectSiblingOf :Person)
ObjectPropertyRange(:isDirectSiblingOf :Person)

# Object Property: :isFemalePartnerIn (:isFemalePartnerIn)

SubObjectPropertyOf(:isFemalePartnerIn :isPartnerIn)
ObjectPropertyDomain(:isFemalePartnerIn :Woman)
ObjectPropertyRange(:isFemalePartnerIn :Marriage)

# Object Property: :isFirstCousinOf (:isFirstCousinOf)

SubObjectPropertyOf(:isFirstCousinOf :isBloodRelationOf)
SymmetricObjectProperty(:isFirstCousinOf)
ObjectPropertyDomain(:isFirstCousinOf :Person)
ObjectPropertyRange(:isFirstCousinOf :Person)

# Object Property: :isFirstCousinOnceRemovedOf (:isFirstCousinOnceRemovedOf)

SubObjectPropertyOf(:isFirstCousinOnceRemovedOf :isBloodRelationOf)
SymmetricObjectProperty(:isFirstCousinOnceRemovedOf)
ObjectPropertyDomain(:isFirstCousinOnceRemovedOf :Person)
ObjectPropertyRange(:isFirstCousinOnceRemovedOf :Person)

# Object Property: :isForefatherOf (:isForefatherOf)

SubObjectPropertyOf(:isForefatherOf :isAncestorOf)
TransitiveObjectProperty(:isForefatherOf)

# Object Property: :isForemotherOf (:isForemotherOf)

SubObjectPropertyOf(:isForemotherOf :isAncestorOf)
TransitiveObjectProperty(:isForemotherOf)

# Object Property: :isGreatAuntOf (:isGreatAuntOf)

ObjectPropertyDomain(:isGreatAuntOf :Woman)
ObjectPropertyRange(:isGreatAuntOf :Person)

# Object Property: :isGreatUncleOf (:isGreatUncleOf)

ObjectPropertyDomain(:isGreatUncleOf :Man)
ObjectPropertyRange(:isGreatUncleOf :Person)

# Object Property: :isInLawOf (:isInLawOf)

SubObjectPropertyOf(:isInLawOf :isRelationOf)
SymmetricObjectProperty(:isInLawOf)
ObjectPropertyDomain(:isInLawOf :Person)
ObjectPropertyRange(:isInLawOf :Person)

# Object Property: :isMalePartnerIn (:isMalePartnerIn)

SubObjectPropertyOf(:isMalePartnerIn :isPartnerIn)
ObjectPropertyDomain(:isMalePartnerIn :Man)
ObjectPropertyRange(:isMalePartnerIn :Marriage)

# Object Property: :isNephewOf (:isNephewOf)

SubObjectPropertyOf(:isNephewOf :isBloodRelationOf)
ObjectPropertyDomain(:isNephewOf :Man)
ObjectPropertyRange(:isNephewOf :Person)

# Object Property: :isNieceOf (:isNieceOf)

SubObjectPropertyOf(:isNieceOf :isBloodRelationOf)
ObjectPropertyDomain(:isNieceOf :Woman)
ObjectPropertyRange(:isNieceOf :Person)

# Object Property: :isParentInLawOf (:isParentInLawOf)

SubObjectPropertyOf(:isParentInLawOf :isInLawOf)
ObjectPropertyDomain(:isParentInLawOf :Person)
ObjectPropertyRange(:isParentInLawOf :Person)

# Object Property: :isPartnerIn (:isPartnerIn)

ObjectPropertyDomain(:isPartnerIn :Person)
ObjectPropertyRange(:isPartnerIn :Marriage)

# Object Property: :isRelationOf (:isRelationOf)

SymmetricObjectProperty(:isRelationOf)
TransitiveObjectProperty(:isRelationOf)
ObjectPropertyDomain(:isRelationOf :Person)
ObjectPropertyRange(:isRelationOf :Person)

# Object Property: :isSecondCousinOf (:isSecondCousinOf)

SubObjectPropertyOf(:isSecondCousinOf :isBloodRelationOf)
SymmetricObjectProperty(:isSecondCousinOf)
ObjectPropertyDomain(:isSecondCousinOf :Person)
ObjectPropertyRange(:isSecondCousinOf :Person)

# Object Property: :isSiblingInLawOf (:isSiblingInLawOf)

SubObjectPropertyOf(:isSiblingInLawOf :isInLawOf)
SymmetricObjectProperty(:isSiblingInLawOf)
ObjectPropertyDomain(:isSiblingInLawOf :Person)
ObjectPropertyRange(:isSiblingInLawOf :Person)

# Object Property: :isSiblingOf (:isSiblingOf)

SubObjectPropertyOf(:isSiblingOf :isBloodRelationOf)
SymmetricObjectProperty(:isSiblingOf)
TransitiveObjectProperty(:isSiblingOf)
ObjectPropertyDomain(:isSiblingOf :Person)
ObjectPropertyRange(:isSiblingOf :Person)

# Object Property: :isSisterInLawOf (:isSisterInLawOf)

SubObjectPropertyOf(:isSisterInLawOf :isSiblingInLawOf)
ObjectPropertyDomain(:isSisterInLawOf :Woman)
ObjectPropertyRange(:isSisterInLawOf :Person)

# Object Property: :isSisterOf (:isSisterOf)

SubObjectPropertyOf(:isSisterOf :isDirectSiblingOf)
ObjectPropertyDomain(:isSisterOf :Woman)
ObjectPropertyRange(:isSisterOf :Person)

# Object Property: :isSonOf (:isSonOf)

SubObjectPropertyOf(:isSonOf :hasParent)

# Object Property: :isSpouseOf (:isSpouseOf)

SubObjectPropertyOf(:isSpouseOf :isInLawOf)
SymmetricObjectProperty(:isSpouseOf)
ObjectPropertyDomain(:isSpouseOf :Person)
ObjectPropertyRange(:isSpouseOf :Person)

# Object Property: :isThirdCousinOf (:isThirdCousinOf)

SubObjectPropertyOf(:isThirdCousinOf :isBloodRelationOf)
SymmetricObjectProperty(:isThirdCousinOf)
ObjectPropertyDomain(:isThirdCousinOf :Person)
ObjectPropertyRange(:isThirdCousinOf :Person)

# Object Property: :isUncleInLawOf (:isUncleInLawOf)

SubObjectPropertyOf(:isUncleInLawOf :isInLawOf)
ObjectPropertyDomain(:isUncleInLawOf :Man)
ObjectPropertyRange(:isUncleInLawOf :Person)

# Object Property: :isUncleOf (:isUncleOf)

SubObjectPropertyOf(:isUncleOf :isBloodRelationOf)
ObjectPropertyDomain(:isUncleOf :Man)
ObjectPropertyRange(:isUncleOf :Person)


############################
#   Classes
############################

# Class: :Ancestor (:Ancestor)

EquivalentClasses(:Ancestor ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isAncestorOf :Person)))

# Class: :AncestorOfRobert (:AncestorOfRobert)

EquivalentClasses(:AncestorOfRobert ObjectIntersectionOf(:Person ObjectHasValue(:isAncestorOf :robert_david_bright_1965)))

# Class: :Aunt (:Aunt)

EquivalentClasses(:Aunt ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :AuntInLaw (:AuntInLaw)

EquivalentClasses(:AuntInLaw ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isWifeOf ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :BloodRelation (:BloodRelation)

EquivalentClasses(:BloodRelation ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isBloodRelationOf :Person)))

# Class: :Brother (:Brother)

EquivalentClasses(:Brother ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isSiblingOf :Person)))

# Class: :BrotherInLaw (:BrotherInLaw)

SubClassOf(:BrotherInLaw ObjectIntersectionOf(:Man ObjectUnionOf(ObjectSomeValuesFrom(:isHusbandOf :Person) ObjectSomeValuesFrom(:isSpouseOf :Person))))

# Class: :Cousin (:Cousin)

EquivalentClasses(:Cousin ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasAncestor ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :Daughter (:Daughter)

EquivalentClasses(:Daughter ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:hasParent :Person)))

# Class: :DaughterInLaw (:DaughterInLaw)

EquivalentClasses(:DaughterInLaw ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :Descendant (:Descendant)

EquivalentClasses(:Descendant ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasAncestor :Person)))

# Class: :Father (:Father)

EquivalentClasses(:Father ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isFatherOf :Person)))

# Class: :FatherInLaw (:FatherInLaw)

EquivalentClasses(:FatherInLaw ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :FemaleAncestor (:FemaleAncestor)

EquivalentClasses(:FemaleAncestor ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isAncestorOf :Person)))

# Class: :FemaleDescendant (:FemaleDescendant)

EquivalentClasses(:FemaleDescendant ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:hasAncestor :Person)))

# Class: :FemaleGender (:FemaleGender)

SubClassOf(:FemaleGender :Gender)
DisjointClasses(:FemaleGender :MaleGender)

# Class: :FirstCousin (:FirstCousin)

EquivalentClasses(:FirstCousin ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :Forefather (:Forefather)

EquivalentClasses(:Forefather ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isForefatherOf :Person)))

# Class: :Foremother (:Foremother)

EquivalentClasses(:Foremother ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isForemotherOf :Person)))

# Class: :Gender (:Gender)

SubClassOf(:Gender :DomainEntity)
DisjointClasses(:Gender :Marriage)
DisjointClasses(:Gender :Person)

# Class: :Grandfather (:Grandfather)

EquivalentClasses(:Grandfather ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isFatherOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :Grandmother (:Grandmother)

EquivalentClasses(:Grandmother ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isMotherOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :Grandparent (:Grandparent)

EquivalentClasses(:Grandparent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :GreatAunt (:GreatAunt)

EquivalentClasses(:GreatAunt ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isAuntOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :GreatGrandfather (:GreatGrandfather)

EquivalentClasses(:GreatGrandfather ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isFatherOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :GreatGrandparent (:GreatGrandparent)

EquivalentClasses(:GreatGrandparent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :GreatGreatGrandparent (:GreatGreatGrandparent)

EquivalentClasses(:GreatGreatGrandparent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))))

# Class: :GreatUncle (:GreatUncle)

EquivalentClasses(:GreatUncle ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isBrotherOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :Husband (:Husband)

EquivalentClasses(:Husband ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isMalePartnerIn ObjectIntersectionOf(:Marriage ObjectSomeValuesFrom(:hasFemalePartner :Woman)))))

# Class: :InLaw (:InLaw)

SubClassOf(:InLaw ObjectIntersectionOf(:Person ObjectUnionOf(ObjectSomeValuesFrom(:isBloodRelationOf :Person) ObjectSomeValuesFrom(:isSpouseOf :Person))))

# Class: :MaleAncestor (:MaleAncestor)

EquivalentClasses(:MaleAncestor ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isAncestorOf :Person)))

# Class: :MaleDescendant (:MaleDescendant)

EquivalentClasses(:MaleDescendant ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:hasAncestor :Person)))

# Class: :MaleGender (:MaleGender)

SubClassOf(:MaleGender :Gender)

# Class: :Man (:Man)

EquivalentClasses(:Man ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasGender :MaleGender)))

# Class: :Marriage (:Marriage)

SubClassOf(:Marriage ObjectIntersectionOf(:DomainEntity ObjectSomeValuesFrom(:hasFemalePartner :Woman) ObjectSomeValuesFrom(:hasMalePartner :Man)))
DisjointClasses(:Marriage :Person)

# Class: :Mother (:Mother)

EquivalentClasses(:Mother ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isMotherOf :Person)))

# Class: :MotherInLaw (:MotherInLaw)

EquivalentClasses(:MotherInLaw ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isMotherOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :Parent (:Parent)

EquivalentClasses(:Parent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))

# Class: :ParentInLaw (:ParentInLaw)

EquivalentClasses(:ParentInLaw ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :Person (:Person)

SubClassOf(:Person ObjectIntersectionOf(:DomainEntity ObjectSomeValuesFrom(:hasFather :Man) ObjectSomeValuesFrom(:hasGender :Gender) ObjectSomeValuesFrom(:hasMother :Woman)))

# Class: :SecondCousin (:SecondCousin)

EquivalentClasses(:SecondCousin ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))))))

# Class: :SecondCousinOfRobert (:SecondCousinOfRobert)

EquivalentClasses(:SecondCousinOfRobert ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectHasValue(:isParentOf :robert_david_bright_1965)))))))))))

# Class: :Sibling (:Sibling)

EquivalentClasses(:Sibling ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf :Person)))

# Class: :SiblingInLaw (:SiblingInLaw)

EquivalentClasses(:SiblingInLaw ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :Sister (:Sister)

EquivalentClasses(:Sister ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isSiblingOf :Person)))

# Class: :SisterInLaw (:SisterInLaw)

SubClassOf(:SisterInLaw ObjectIntersectionOf(:Woman ObjectUnionOf(ObjectSomeValuesFrom(:isSiblingOf :Person) ObjectSomeValuesFrom(:isWifeOf :Person))))

# Class: :Son (:Son)

EquivalentClasses(:Son ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:hasParent :Person)))

# Class: :SonInLaw (:SonInLaw)

EquivalentClasses(:SonInLaw ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))))

# Class: :Spouse (:Spouse)

EquivalentClasses(:Spouse ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSpouseOf :Person)))

# Class: :ThirdCousin (:ThirdCousin)

EquivalentClasses(:ThirdCousin ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person))))))))))))))

# Class: :Uncle (:Uncle)

EquivalentClasses(:Uncle ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))

# Class: :UncleInLaw (:UncleInLaw)

EquivalentClasses(:UncleInLaw ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isHusbandOf ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isParentOf :Person)))))))

# Class: :UncleOfRichard (:UncleOfRichard)

EquivalentClasses(:UncleOfRichard ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isBrotherOf ObjectIntersectionOf(:Person ObjectHasValue(:isParentOf :richard_john_bright_1962)))))

# Class: :UncleOfRobert (:UncleOfRobert)

EquivalentClasses(:UncleOfRobert ObjectIntersectionOf(:Man ObjectSomeValuesFrom(:isBrotherOf ObjectIntersectionOf(:Person ObjectHasValue(:isParentOf :robert_david_bright_1965)))))

# Class: :Wife (:Wife)

EquivalentClasses(:Wife ObjectIntersectionOf(:Woman ObjectSomeValuesFrom(:isFemalePartnerIn ObjectIntersectionOf(:Marriage ObjectSomeValuesFrom(:hasMalePartner :Man)))))

# Class: :Woman (:Woman)

EquivalentClasses(:Woman ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:hasGender :FemaleGender)))

# Class: :test (:test)

EquivalentClasses(:test ObjectIntersectionOf(:Person ObjectComplementOf(ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectHasValue(:isParentOf :robert_david_bright_1965)))) ObjectSomeValuesFrom(:hasParent ObjectIntersectionOf(:Person ObjectSomeValuesFrom(:isSiblingOf ObjectIntersectionOf(:Person ObjectHasValue(:isParentOf :robert_david_bright_1965)))))))



SubObjectPropertyOf(ObjectPropertyChain(:hasAncestor :isAncestorOf) :isBloodRelationOf)
SubObjectPropertyOf(ObjectPropertyChain(:hasGrandParent :isSiblingOf :isGrandParentOf) :isSecondCousinOf)
SubObjectPropertyOf(ObjectPropertyChain(:hasGreatGrandParent :isSiblingOf :isGreatGrandParentOf) :isThirdCousinOf)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :hasFather) :hasGrandfather)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :hasGrandfather) :hasGreatGrandfather)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :hasGrandmother) :hasGreatGrandmother)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :hasMother) :hasGrandmother)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :isSiblingOf :isParentOf) :isFirstCousinOf)
SubObjectPropertyOf(ObjectPropertyChain(:isBrotherOf :isGrandParentOf) :isGreatUncleOf)
SubObjectPropertyOf(ObjectPropertyChain(:isBrotherOf :isParentOf) :isUncleOf)
SubObjectPropertyOf(ObjectPropertyChain(:isBrotherOf :isSpouseOf) :isBrotherInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isDaughterOf :isSiblingOf) :isNieceOf)
SubObjectPropertyOf(ObjectPropertyChain(:isFemalePartnerIn :hasMalePartner) :hasHusband)
SubObjectPropertyOf(ObjectPropertyChain(:isFirstCousinOf :isParentOf) :isFirstCousinOnceRemovedOf)
SubObjectPropertyOf(ObjectPropertyChain(:isHusbandOf :isSiblingOf) :isBrotherInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isHusbandOf :isSisterOf :isParentOf) :isUncleInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isMalePartnerIn :hasFemalePartner) :hasWife)
SubObjectPropertyOf(ObjectPropertyChain(:isParentOf :isSpouseOf) :isParentInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isSisterOf :isGrandParentOf) :isGreatAuntOf)
SubObjectPropertyOf(ObjectPropertyChain(:isSisterOf :isParentOf) :isAuntOf)
SubObjectPropertyOf(ObjectPropertyChain(:isSisterOf :isSpouseOf) :isSisterInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isSonOf :isSiblingOf) :isNephewOf)
SubObjectPropertyOf(ObjectPropertyChain(:isSpouseOf :hasFather) :hasFatherInLaw)
SubObjectPropertyOf(ObjectPropertyChain(:isSpouseOf :hasMother) :hasMotherInLaw)
SubObjectPropertyOf(ObjectPropertyChain(:isWifeOf :isBrotherOf :isParentOf) :isAuntInLawOf)
SubObjectPropertyOf(ObjectPropertyChain(:isWifeOf :isSiblingOf) :isSisterInLawOf)
)