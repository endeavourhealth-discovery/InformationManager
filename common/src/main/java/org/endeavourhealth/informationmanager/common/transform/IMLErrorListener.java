package org.endeavourhealth.informationmanager.common.transform;


import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.IntervalSet;


import java.util.ArrayList;
import java.util.List;

/**
 * Antlr error listener subclass that handles purely parser based syntax errors on behalf of a validator.
 * Adds to a list of syntax errors held by the validator
 */

public class IMLErrorListener extends BaseErrorListener {

   private CommonToken offendingSymbol;
   private ParserRuleContext context;
   private IMLValidator validator;

   /**
    * Constructor passes in the validator object to be populated qith
    * @param validator
    */
   public IMLErrorListener(IMLValidator validator){
      this.validator= validator;
   }

   /**
    * Override of antlr error listener to capture errors, position and expected tokens
    * @param recognizer  the recogniser being either the lexer or the parser
    * @param offendingSymbol the symbol that has caused the error
    * @param line the line number on which the error occurs
    * @param charPositionInLine  the position in the line in which the error occurs
    * @param msg  the textual error message generated by antlr parser
    * @param e the recognition exception generated by the antlr parser
    */
   @Override
   public void syntaxError(Recognizer<?, ?> recognizer,
                           Object offendingSymbol,
                           int line,
                           int charPositionInLine,
                           String msg,
                           RecognitionException e) {
      IMSyntaxError error = new IMSyntaxError();
      validator.addSyntaxError(error);
      error.setMsg(msg);
      error.setLine(line);
      error.setCharPositionInLine(charPositionInLine);

      if (offendingSymbol instanceof org.antlr.v4.runtime.CommonToken)
         this.offendingSymbol= (CommonToken) offendingSymbol;
         error.setBadToken((CommonToken) offendingSymbol);
      if (recognizer instanceof Lexer) {
         Lexer lexer= (Lexer) recognizer;
         error.setLexer(lexer);
      } else {
         Parser parser = (Parser) recognizer;
         error.setParser(parser);
         context = parser.getContext();
         error.setExpectedTokens(parser.getExpectedTokens());
      }

   }





   public CommonToken getOffendingSymbol() {
      return offendingSymbol;
   }

   public ParserRuleContext getContext() {
      return context;
   }
}

