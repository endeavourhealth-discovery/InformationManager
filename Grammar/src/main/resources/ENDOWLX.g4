grammar ENDOWL;
concept : identifier name description? entitytype;
identifier : PIRI ws? EQUAL ws? IRI lf ws?;
name : NAME ws? EQUAL ws? text lf ws?;
text : (UPPERCASE|LOWERCASE|INTEGER|LEFT_PAREN|RIGHT_PAREN|SPACE|DASH)+;
description : text cr;
entitytype : ENTITYTYPE ws? EQUAL ws? classentity ws? lf;
classentity :CLASSENTITY ws classaxiomtype;
classaxiomtype : AXIOMTYPE ws? EQUAL ws? (subclass|equivalent) ws? lf;
subclass: SUBCLASS ws (classes| properties)|(classes ws properties);
equivalent: EQUIVALENT ws classes ws properties;
objectproperty : OBJECTPROPERTY ws propertyaxiomtype ws ;
propertyaxiomtype: AXIOMTYPE COLON ws subobjectproperty|objectpropertychain ws;
subobjectproperty : SUBOBJECTPROPERTY ws iri;
objectpropertychain: PROPERTYCHAIN ws (iri ws)+ EOF?;
classes: ws*? CLASS ws? EQUAL ws? (iri | (LEFT_BRACE iri (COMMA iri)* RIGHT_BRACE)) ws? lf;
properties : ws*? PROPERTIES ws? EQUAL? ws (propertyvalue | (LEFT_BRACE propertyvalue (COMMA propertyvalue)* RIGHT_BRACE)) ws? lf;
propertyvalue: iri ws cardinality ws rangeexpression;
cardinality : SOME | only | min | max| exact;
rangeexpression : (classes properties?)| properties;
namedclass : CLASS COLON ws iri;
valueset : VALUESET COLON ws iri;
only : ONLY;
min : MIN ws INTEGER;
max : MAX ws INTEGER;
exact : EXACTLY ws INTEGER;
iri : IRI | (APOSTROPHE text APOSTROPHE) cr ws?;
ws : ( sp | htab | comment)+;
comment : SLASH ASTERISK (INTEGER| UPPERCASE| LOWERCASE)+ ASTERISK SLASH;
sp : SPACE; // space
htab : TAB; // tab
cr : CR; // carriage return
lf : LF; // line feed
PIRI :'iri';
NAME : 'name';
EQUAL : '=';
IRI : ((LOWERCASE ':')|':') (UPPERCASE|LOWERCASE|INTEGER)+;
VALUESET: 'Value set';
MIN: 'min';
MAX: 'max';
EXACTLY : 'exactly';
SOME : 'at least one'| 'some';
ONLY :'only';
UNION : 'any of/or';
PROPERTIES : 'Property';
PROPERTYCHAIN : 'Property chain';
SUBOBJECTPROPERTY : 'Subproperty of';
ENTITYTYPE: 'Entity type';
OBJECTPROPERTY : 'Object property';
SUBCLASS: 'Subclass of';
EQUIVALENT : 'Equivalent to';
CLASSENTITY : 'Class entity';
AXIOMTYPE : 'Axiom type';
CLASS : 'Class';
INTEGER : [0-9];
LOWERCASE: [a-z];
UPPERCASE: [A-Z];
TAB : [\t];
LF : [\n];
CR : [\r];
SPACE : ' ';
EXCLAMATION : '!';
QUOTE : '"';
POUND : '#';
DOLLAR : '$';
PERCENT : '%';
AMPERSAND : '&';
APOSTROPHE : '\'';
LEFT_PAREN : '(';
RIGHT_PAREN : ')';
ASTERISK : '*';
PLUS : '+';
COMMA : ',';
DASH : '-';
PERIOD : '.';
SLASH : '/';
ZERO : '0';
ONE : '1';
TWO : '2';
THREE : '3';
FOUR : '4';
FIVE : '5';
SIX : '6';
SEVEN : '7';
EIGHT : '8';
NINE : '9';
COLON : ':';
SEMICOLON : ';';
LESS_THAN : '<';
GREATER_THAN : '>';
QUESTION : '?';
AT : '@';

LEFT_BRACE : '[';
BACKSLASH : '\\';
RIGHT_BRACE : ']';
CARAT : '^';
UNDERSCORE : '_';
ACCENT : '`';
A : 'a';
B : 'b';
C : 'c';
D : 'd';
E : 'e';
F : 'f';
G : 'g';
H : 'h';
I : 'i';
J : 'j';
K : 'k';
L : 'l';
M : 'm';
N : 'n';
O : 'o';
P : 'p';
Q : 'q';
R : 'r';
S : 's';
T : 't';
U : 'u';
V : 'v';
W : 'w';
X : 'x';
Y : 'y';
Z : 'z';
LEFT_CURLY_BRACE : '{';
PIPE : '|';
RIGHT_CURLY_BRACE : '}';
TILDE : '~';